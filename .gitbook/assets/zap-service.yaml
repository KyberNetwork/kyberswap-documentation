openapi: 3.0.1
info:
  title: Zap Service
  description: Zap Service for quickly zapping pool liquidity in a single transaction
  contact:
    url: https://discord.gg/kyberswap
    email: bd@kyber.network
  version: 1.0.0
servers:
  - url: https://zap-api.kyberswap.com/{chain}
    description: production
    variables:
      chain:
        enum:
          - arbitrum
          - avalanche
          - base
          - bsc
          - polygon
          - optimism
        default: polygon
tags:
  - name: Service
paths:
  /api/v1/in/route:
    get:
      tags:
        - Service
      summary: Get the best zap-in route.
      operationId: Service_GetInRoute
      parameters:
        - name: dex
          in: query
          description: |-
            which dex to use zap with

             - DEX_UNSPECIFIED: Unspecified value.
             - DEX_UNISWAPV3: For UniSwap V3.
             - DEX_PANCAKESWAPV3: For PancakeSwap V3.
             - DEX_UNISWAPV2: For Uniswap V2.
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: DEX_UNSPECIFIED
            enum:
              - DEX_UNSPECIFIED
              - DEX_UNISWAPV3
              - DEX_PANCAKESWAPV3
              - DEX_UNISWAPV2
          example: "DEX_UNISWAPV3"
        - name: pool.id
          in: query
          description: id of the pool to zap into.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: "0xb46388f104ff88aac68626a316aaf3a924f32055"
        - name: pool.token0
          in: query
          description: address of the pool's token0.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a"
        - name: pool.token1
          in: query
          description: address of the pool's token1.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"
        - name: pool.fee
          in: query
          description: fee tier of the pool (in 0.0001%).
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
          example: 10000
        - name: position.id
          in: query
          description: id of the position to add liquidity to; omit to create a new uniswapV3 position. for uniswapV2 this is user address
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: position.tickLower
          in: query
          description: "min tick of the position, required if creating a new uniswapV3 position."
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
          example: -24800
        - name: position.tickUpper
          in: query
          description: "max tick of the position, required if creating a new uniswapV3 position."
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
          example: 32400
        - name: tokenIn
          in: query
          description: which token(s) to use as zap source. also accepts comma separated addresses
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
        - name: amountIn
          in: query
          description: "amount(s) to zap including fee, corresponding to tokenIn. also accepts comma separated amounts."
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example: "1000000000000000000"
        - name: aggregatorOptions.disable
          in: query
          description: whether to disable swapping with the aggregator
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: aggregatorOptions.includedSources
          in: query
          description: comma-separated list of sources to use for aggregator
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: aggregatorOptions.excludedSources
          in: query
          description: comma-separated list of sources to exclude for aggregator
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: feeAddress
          in: query
          description: the address of the fee recipient.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: feePcm
          in: query
          description: |-
            fee percentage in per cent mille (0.001% or 1 in 100,000). Ignored if feeAddress is empty.
            From 0 to 100,000 inclusively. Example: 1 for 0.001%.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: slippage
          in: query
          description: |-
            maximum slippage tolerance in basis points (0.01%), used for aggregator (exceeding which the transaction will
            revert) and pool swap during zap (for additional zapping and for refund).
            From 0 to 10,000 inclusively. Example: 1 for 0.01%.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
          example: "100"
        - name: X-Client-Id
          in: header
          description: Client Id
          required: false
          style: simple
          explode: false
          schema:
            type: string
          example: "zap-docs"
        - name: X-Request-Id
          in: header
          description: Request Id
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetInRouteResponse'
        "400":
          description: Invalid Argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 3
                message: "dex DEX_PANCAKESWAPV3 not available on chain polygon; invalid GetInRouteRequest.Position: value is required; invalid GetInRouteRequest.TokenIn: value does not match regex pattern \"^0x[0-9A-Za-z]{40}$\"; invalid GetInRouteRequest.AmountIn: value does not match regex pattern \"^\\\\d+$\"; invalid GetInRouteRequest.FeePcm: value must be inside range [0, 100000]; invalid GetInRouteRequest.Slippage: value must be inside range [0, 10000]; invalid pool: token0=0x430ef9263e76dae63c84292c3409d61c598e9682, expected 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; invalid pool: fee=500, expected 10000"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 5
                message: "failed to get best zap route"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /api/v1/in/route/decode:
    post:
      tags:
        - Service
      summary: Decode zap-in route for debugging purposes.
      operationId: Service_DecodeInRoute
      requestBody:
        description: Decode zap-in route for debugging purposes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1DecodeInRouteRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1DecodeInRouteResponse'
        "400":
          description: Invalid Argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 3
                message: "dex DEX_PANCAKESWAPV3 not available on chain polygon; invalid GetInRouteRequest.Position: value is required; invalid GetInRouteRequest.TokenIn: value does not match regex pattern \"^0x[0-9A-Za-z]{40}$\"; invalid GetInRouteRequest.AmountIn: value does not match regex pattern \"^\\\\d+$\"; invalid GetInRouteRequest.FeePcm: value must be inside range [0, 100000]; invalid GetInRouteRequest.Slippage: value must be inside range [0, 10000]; invalid pool: token0=0x430ef9263e76dae63c84292c3409d61c598e9682, expected 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; invalid pool: fee=500, expected 10000"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 5
                message: "failed to get best zap route"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
      parameters: []
  /api/v1/in/route/build:
    post:
      tags:
        - Service
      summary: Build encoded data for the specified zap-in route.
      operationId: Service_BuildInRoute
      parameters:
        - name: X-Client-Id
          in: header
          description: Client Id
          required: false
          style: simple
          explode: false
          schema:
            type: string
          example: "zap-docs"
        - name: X-Request-Id
          in: header
          description: Request Id
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Build encoded data for zap-in transaction from the specified route.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1BuildInRouteRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1BuildInRouteResponse'
        "400":
          description: Invalid Argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 3
                message: "dex DEX_PANCAKESWAPV3 not available on chain polygon; invalid GetInRouteRequest.Position: value is required; invalid GetInRouteRequest.TokenIn: value does not match regex pattern \"^0x[0-9A-Za-z]{40}$\"; invalid GetInRouteRequest.AmountIn: value does not match regex pattern \"^\\\\d+$\"; invalid GetInRouteRequest.FeePcm: value must be inside range [0, 100000]; invalid GetInRouteRequest.Slippage: value must be inside range [0, 10000]; invalid pool: token0=0x430ef9263e76dae63c84292c3409d61c598e9682, expected 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; invalid pool: fee=500, expected 10000"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
              example:
                code: 5
                message: "failed to get best zap route"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
components:
  schemas:
    DataPoolDetails:
      title: details of the pool
      type: object
      properties:
        tick:
          title: pool tick before zap (uniswapV3)
          type: integer
          format: int32
        newTick:
          title: pool tick after zap (uniswapV3)
          type: integer
          format: int32
        sqrtP:
          title: pool sqrt price (times 2^96) before zap (uniswapV3)
          type: string
        newSqrtP:
          title: pool sqrt price (times 2^96) after zap (uniswapV3)
          type: string
        reserve0:
          title: reserve0 before zap (uniswapV2)
          type: string
        newReserve0:
          title: reserve0 after zap (uniswapV2)
          type: string
        reserve1:
          title: reserve1 before zap (uniswapV2)
          type: string
        newReserve1:
          title: reserve1 after zap (uniswapV2)
          type: string
    DataPositionDetails:
      title: details of the new position state
      type: object
      properties:
        addedLiquidity:
          title: how much position liquidity to be added
          pattern: \d+
          type: string
        addedAmount0:
          title: amount of token0 to be added
          type: string
        addedAmount0Usd:
          title: USD value of token0 to be added
          type: string
        addedAmount1:
          title: amount of token1 to be added
          type: string
        addedAmount1Usd:
          title: USD value of token1 to be added
          type: string
        addedAmountUsd:
          title: total USD value of the position to be added
          type: string
    DataZapDetails:
      title: details of the zap
      type: object
      properties:
        initialAmountUsd:
          title: USD value of the source zap token amount
          type: string
        aggregatorSwaps:
          title: list of aggregator swaps
          type: array
          items:
            $ref: '#/components/schemas/ZapDetailsAggregatorSwap'
        kyberZapFeePcm:
          title: kyber fee per cent mille (0.001%) of the source zap amount
          type: integer
          format: int64
        kyberZapFeeUsd:
          title: kyber fee in USD
          type: string
        partnerFeePcm:
          title: partner fee per cent mille (0.001%) of the source zap amount
          type: integer
          format: int64
        partnerFeeUsd:
          title: partner fee in USD
          type: string
        remainingAmount0:
          title: left-over amount of token0 after zapping
          type: string
        remainingAmount0Usd:
          title: USD value of left-over amount of token0
          type: string
        remainingAmount1:
          title: left-over amount of token1 after zapping
          type: string
        remainingAmount1Usd:
          title: USD value of left-over amount of token1
          type: string
        finalAmountUsd:
          title: USD value of the final amount including the added position and the left-over amount
          type: string
        priceImpact:
          title: price impact after zapping of final amount against initial amount
          type: number
          format: float
    GetInRouteRequestAggregatorOptions:
      title: options for getting aggregator routes
      type: object
      properties:
        disable:
          title: whether to disable swapping with the aggregator
          type: boolean
        includedSources:
          title: comma-separated list of sources to use for aggregator
          type: string
        excludedSources:
          title: comma-separated list of sources to exclude for aggregator
          type: string
    ZapDetailsAggregatorSwap:
      title: aggregator swap input and output
      type: object
      properties:
        tokenIn:
          title: swapped token address
          pattern: "^0x[0-9A-Za-z]{40}$"
          type: string
        amountIn:
          title: amount of token to be swapped using aggregator
          type: string
        amountInUsd:
          title: USD value of the amount to be swapped using aggregator
          type: string
        tokenOut:
          title: token address to swap into
          pattern: "^0x[0-9A-Za-z]{40}$"
          type: string
        amountOut:
          title: amount of output token received by swapping using aggregator
          type: string
        amountOutUsd:
          title: USD value of the amount received by swapping using aggregator
          type: string
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
      additionalProperties:
        type: object
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1BuildInRouteRequest:
      type: object
      properties:
        sender:
          type: string
          description: "the wallet sending the transaction, and thus, the tokens."
        recipient:
          type: string
          description: the wallet receiving the new position. default to sender if empty.
        route:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: the route as returned from get-route endpoint.
          format: byte
        deadline:
          type: integer
          description: deadline for the swap transaction to execute.
          format: int64
        source:
          type: string
          description: the source of the zap-in transaction.
      description: Build encoded data for zap-in transaction from the specified route.
      example:
        sender: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"
        recipient: "0x5cb738DAe833Ec21fe65ae1719fAd8ab8cE7f23D"
        route: "KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg=="
        deadline: 1800000000
        source: "zap-docs"
    v1BuildInRouteResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/v1BuildInRouteResponseData'
      description: Returns the zap-in transaction details.
      example:
        code: 0
        message: "OK"
        data:
          routerAddress: "0x411c8FC7D5dDB3bE1263982805Af709586B6b40c"
          callData: "0x0779b145000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b46388f104ff88aac68626a316aaf3a924f32055000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000005cb738dae833ec21fe65ae1719fad8ab8ce7f23dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9f200000000000000000000000000000000000000000000000000000000000007e90000000000000000000000000000000000000000000000000076838ee6fed68380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000268d69745f8a30d30610f67fd9ac15646f32ab360000000000000000000000007b2d28123e854f7696169b19a762c89b4e46b3a8000000000000000000000000000000000000000000000000000000006b49d20000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000d400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000008a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b500000000000000000000000000000000000000000000000006e36fe24add704c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000007e4e21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000b3f868e0be5597d5db7feb59e1cadbb0fdda50a0000000000000000000000007b2d28123e854f7696169b19a762c89b4e46b3a8000000000000000000000000000000000000000000000000000000006b49d2000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8eb58be542e77195355d90100beb07105b9bd295e00010000000000000000001b0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000b3f868e0be5597d5db7feb59e1cadbb0fdda50a00000000000000000000000000000000000000000000000006e36fe24add704c000000000000000000000000000000000000000000000000000000000000002000000000000000000000004f5373a1ce000000000000000004ba6b1f27b74c210000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000b3f868e0be5597d5db7feb59e1cadbb0fdda50a000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000007b2d28123e854f7696169b19a762c89b4e46b3a800000000000000000000000000000000000000000000000006e36fe24add704c00000000000000000000000000000000000000000000000004ae507352d6be91000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000006e36fe24add704c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fa7b22536f75726365223a227a61702d646f6373222c22416d6f756e74496e555344223a22302e3337353134313533313639393139313733222c22416d6f756e744f7574555344223a22302e33373437373237353337313138313336222c22526566657272616c223a22222c22466c616773223a332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22557962695a50776c2b7469666a7a61493069616a714977437638726f2f493252627631435931486233454b4c4743554f3744486c466d515848712b533078527433356a49496e4d535849745a305337523370524e4377494a44427a774c4b5a4b784b586d4c734f46732f4d4b356745305349724a326a304e756252486a3577474d794251742f4c56486b6e494f6f7a6872646445335a6852322f4b4e2b445a4167775256376476524f53614d346949304d5259496d434d586751445446745a635365325558637a776c6e346c6b54584543504a386e4b54694744697355656e634276773935556861464f4467696b424b68764c506b62386e344a4a6465796b3844494a336269774b486148302f55426d6d394669432b516b4b37494d45356657326c537044624374556f496561395a4e4d6f55695a667853706a5a38774e6b7255512b6e49486e6e4a4935302f695862304a6e6471673d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000b46388f104ff88aac68626a316aaf3a924f320550000000000000000000000000b3f868e0be5597d5db7feb59e1cadbb0fdda50a00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005cb738dae833ec21fe65ae1719fad8ab8ce7f23d00000000000000000000000000000001000000000000000000000000000000010000000000000000000c32eba41fe40400000000000000000011c1412d5cdaaf00000000000000000000009fe4be43fc0000000000000000000000e8b78fa273ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9f200000000000000000000000000000000000000000000000000000000000007e9000000000000000000000000000000000000000013166c922bb23e5c5acb677300000000000000000000000000000000000000001379a368225832766ab0c3d1d000000000000000000000000000000000000000000000000076838ee6fed6838000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
          value: "1000000000000000000"
    v1BuildInRouteResponseData:
      type: object
      properties:
        routerAddress:
          title: zap router address to send the zap-in transaction to
          type: string
        callData:
          title: call data for the zap-in transaction
          type: string
        value:
          title: native token value to transfer with the zap-in transaction in case of zapping with native tokens
          type: string
      description: Encompasses returned data.
    v1DecodeInRouteRequest:
      type: object
      properties:
        route:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: the route as returned from get-route endpoint.
          format: byte
      description: Decode zap-in route for debugging purposes.
      example:
        route: "KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg=="
    v1DecodeInRouteResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/v1DecodeInRouteResponseData'
      description: Returns the zap-in route details.
      example:
        code: 0
        message: "OK"
        data:
          json: "{\"chainId\":137,\"dex\":2,\"pool\":{\"id\":\"0xb46388f104ff88aac68626a316aaf3a924f32055\",\"token0\":\"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\"token1\":\"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\"fee\":10000,\"price\":1.4520849709239092,\"tick\":3730,\"sqrtP\":95471907338836533119330620299,\"liquidity\":7216685524053291079,\"limitSqrtP0\":94517188265448167788137314096,\"limitSqrtP1\":96436270039228821332657192221,\"swapAmount\":0},\"position\":{\"tick_lower\":-24800,\"tick_upper\":32400},\"liquidity\":544560719757316082,\"tokenIn\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\"amount\":1000000000000000000,\"prices\":[1.1000000000000001e-18,7.55351e-19],\"feeAddress\":\"0x0000000000000000000000000000000000000000\",\"slippage\":100,\"aggregatorRoute\":{\"tokenIn\":\"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\"amountIn\":\"501269683100818700\",\"amountInUsd\":\"0.37967218464390523\",\"tokenInMarketPriceAvailable\":false,\"tokenOut\":\"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\"amountOut\":\"344051080916030642\",\"amountOutUsd\":\"0.3784561890076337\",\"tokenOutMarketPriceAvailable\":false,\"gas\":\"205000\",\"gasPrice\":\"35282754748\",\"gasUsd\":\"0.0054783993737169065\",\"extraFee\":{\"feeAmount\":\"0\"},\"route\":[[{\"pool\":\"0xeb58be542e77195355d90100beb07105b9bd295e\",\"tokenIn\":\"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\"tokenOut\":\"0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a\",\"limitReturnAmount\":\"0\",\"swapAmount\":\"501269683100818700\",\"amountOut\":\"344051080916030642\",\"exchange\":\"balancer-v2-weighted\",\"poolLength\":8,\"poolType\":\"balancer-v2-weighted\",\"poolExtra\":{\"blockNumber\":52779441,\"poolId\":\"0xeb58be542e77195355d90100beb07105b9bd295e00010000000000000000001b\",\"tokenOutIndex\":0,\"vault\":\"0xba12222222228d8ba445958a75a0704d566bf2c8\"}}]]}}"
    v1DecodeInRouteResponseData:
      type: object
      properties:
        json:
          type: string
          description: JSON encode of the zap in route.
      description: Encompasses returned data.
    v1Dex:
      type: string
      description: |-
        Dex is the type of dex to zap into/out of. It uses different enum values from the zap contract.

         - DEX_UNSPECIFIED: Unspecified value.
         - DEX_UNISWAPV3: For UniSwap V3.
         - DEX_PANCAKESWAPV3: For PancakeSwap V3.
         - DEX_UNISWAPV2: For Uniswap V2.
      default: DEX_UNSPECIFIED
      enum:
        - DEX_UNSPECIFIED
        - DEX_UNISWAPV3
        - DEX_PANCAKESWAPV3
        - DEX_UNISWAPV2
    v1GetInRouteResponse:
      type: object
      properties:
        code:
          title: grpc error code
          type: integer
          format: int32
        message:
          title: grpc error message
          type: string
        data:
          $ref: '#/components/schemas/v1GetInRouteResponseData'
      description: Returns the best route to zap-in to the specified pool position.
      example:
        code: 0
        message: "OK"
        data:
          poolDetails:
            tick: 2365
            newTick: 3187
            sqrtP: "89175391411093484164171998227"
            newSqrtP: "92914641484534751837379076069"
          positionDetails:
            addedLiquidity: "544560719757316082"
            addedAmount0: "344125607919118574"
            addedAmount0Usd: "0.37853817"
            addedAmount1: "498621002760021565"
            addedAmount1Usd: "0.37663387"
            addedAmountUsd: "0.75517204"
          zapDetails:
            initialAmountUsd: "0.75535100"
            aggregatorSwaps:
              - tokenIn: "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
                amountIn: "492992191970785000"
                amountInUsd: "0.43453022"
                tokenOut: "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a"
                amountOut: "313024496251012026"
                amountOutUsd: "0.43197380"
            kyberZapFeePcm: 0
            kyberZapFeeUsd: "0"
            partnerFeePcm: 0
            partnerFeeUsd: "0"
            remainingAmount0: "0"
            remainingAmount0Usd: "0.00000000"
            remainingAmount1: "3"
            remainingAmount1Usd: "0.00000000"
            finalAmountUsd: "0.75517204"
            priceImpact: 0.023692062
          route: "KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg=="
          routerAddress: "0x411c8FC7D5dDB3bE1263982805Af709586B6b40c"
          gas: "1026213"
          gasUsd: "0.051023"
    v1GetInRouteResponseData:
      type: object
      properties:
        poolDetails:
          $ref: '#/components/schemas/DataPoolDetails'
        positionDetails:
          $ref: '#/components/schemas/DataPositionDetails'
        zapDetails:
          $ref: '#/components/schemas/DataZapDetails'
        route:
          title: the zap route to pass to build API to get call-data
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        routerAddress:
          title: the router address to check approval amount
          type: string
        gas:
          title: rough estimate of gas required for the transaction
          type: string
        gasUsd:
          title: USD value of estimated gas required
          type: string
      description: Encompasses returned data.
    v1Pool:
      type: object
      properties:
        id:
          type: string
          description: id of the pool to zap into.
        token0:
          type: string
          description: address of the pool's token0.
        token1:
          type: string
          description: address of the pool's token1.
        fee:
          type: integer
          description: fee tier of the pool (in 0.0001%).
          format: int64
      description: Pool describes the pool to zap into.
    v1Position:
      type: object
      properties:
        id:
          title: id of the position to add liquidity to; omit to create a new uniswapV3 position. for uniswapV2 this is user address
          type: string
        tickLower:
          type: integer
          description: "min tick of the position, required if creating a new uniswapV3 position."
          format: int32
        tickUpper:
          type: integer
          description: "max tick of the position, required if creating a new uniswapV3 position."
          format: int32
      description: Position describes either an existing position or a new one.
x-original-swagger-version: "2.0"
